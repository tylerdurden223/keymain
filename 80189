local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "NEOX HUB | FISCHv1.5",
    SubTitle = "by hassanxzayn",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})







local Tabs = {
    Home = Window:AddTab({ Title = "| Home", Icon = "rbxassetid://7733960981" }),
    Main = Window:AddTab({ Title = "| Main", Icon = "rbxassetid://7743869612" }),
    Misc = Window:AddTab({ Title = "| Misc", Icon = "rbxassetid://7733789088" }),
    Weather = Window:AddTab({ Title = "| Environment Settings", Icon = "rbxassetid://7734068495" }),
    Teleport = Window:AddTab({ Title = "| Teleport", Icon = "rbxassetid://7733992789" }),
    Performance = Window:AddTab({ Title = "| Performance", Icon = "rbxassetid://7733955511" }),
    ESP = Window:AddTab({ Title = "| Esp", Icon = "rbxassetid://7743876054" }),
    STATS = Window:AddTab({ Title = "| Player And Sever Stats", Icon = "rbxassetid://7743866778" }),
    info = Window:AddTab({ Title = "| Info", Icon = "rbxassetid://7733964719" }),


    

}






Window:SelectTab(1)










Tabs.Home:AddButton({
    Title = "Join our discord",
    Description = "Click on this button to copy the invite link!",
    Callback = function()
        local inviteLink = "https://discord.gg/99UuEwM9sX"
        
        if setclipboard then
            setclipboard(inviteLink)
            print("bro coming to our discord yay!")
        else
            print("setclipboard function not available")
        end
    end
})









AnalyticsService = game:GetService("AnalyticsService")
CollectionService = game:GetService("CollectionService")
DataStoreService = game:GetService("DataStoreService")
HttpService = game:GetService("HttpService")
Lighting = game:GetService("Lighting")
MarketplaceService = game:GetService("MarketplaceService")
Players = game:GetService("Players")
ReplicatedFirst = game:GetService("ReplicatedFirst")
ReplicatedStorage = game:GetService("ReplicatedStorage")
RunService = game:GetService("RunService")
ServerScriptService = game:GetService("ServerScriptService")
ServerStorage = game:GetService("ServerStorage")
SoundService = game:GetService("SoundService")
StarterGui = game:GetService("StarterGui")
StarterPack = game:GetService("StarterPack")
StarterPlayer = game:GetService("StarterPlayer")
TeleportService = game:GetService("TeleportService")
TweenService = game:GetService("TweenService")
Teams = game:GetService("Teams")
VirtualUser = game:GetService("VirtualUser")
Workspace = game:GetService("Workspace")
UserInputService = game:GetService("UserInputService")
VirtualInputManager = game:GetService("VirtualInputManager")
ContextActionService = game:GetService("ContextActionService")
GuiService = game:GetService("GuiService")
print("ClientMonsterTools.lua loaded")





-- Locals
local LocalPlayer = Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character
local HumanoidRootPart = LocalCharacter:FindFirstChild("HumanoidRootPart")
local ActiveFolder = Workspace:FindFirstChild("active")
local PlayerGUI = LocalPlayer:FindFirstChildOfClass("PlayerGui")

-- Varbiables

local AutoFreeze = false
local autoShake = false
local AutoFish = false
local autoShake2 = false
local autoShake3 = false
local AutoZoneCast = false
local autoShakeDelay = 0.3
local autoReel = false
local AutoCast = false
local Noclip = false
local AntiDrown = false
local WebhookLog = false
local AutoSell = false
local AntiAfk = false
local AutoAppraiser = false

local Keybind = Enum.KeyCode.F

-- Rest

PlayerGUI.ChildAdded:Connect(function(GUI)
    if GUI:IsA("ScreenGui") then
        if GUI.Name == "reel" and autoReel then
            local reelfinishedEvent = ReplicatedStorage:WaitForChild("events"):WaitForChild("reelfinished")
            if reelfinishedEvent then
                while GUI do
                    task.wait(2)
                    reelfinishedEvent:FireServer(100, false)
                end
            end
        end
    end
end)
function AutoFish5()
    if autoShake3 then
        task.spawn(function()
            while AutoFish do
                local PlayerGUI = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
                local shakeUI = PlayerGUI:FindFirstChild("shakeui")
                if shakeUI and shakeUI.Enabled then
                    local safezone = shakeUI:FindFirstChild("safezone")
                    if safezone then
                        local button = safezone:FindFirstChild("button")
                        if button and button:IsA("ImageButton") and button.Visible then
                            if autoShake then
                                local pos = button.AbsolutePosition
                                local size = button.AbsoluteSize
                                VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, true, game:GetService("Players").LocalPlayer, 0)
                                VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, false, game:GetService("Players").LocalPlayer, 0)
                            elseif autoShake2 then
                                GuiService.SelectedObject = button
                                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                            end
                        end
                    end
                end
                task.wait()
            end
        end)
    else
        task.spawn(function()
            while AutoFish do
                task.wait(autoShakeDelay)
                local PlayerGUI = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
                local shakeUI = PlayerGUI:FindFirstChild("shakeui")
                if shakeUI and shakeUI.Enabled then
                    local safezone = shakeUI:FindFirstChild("safezone")
                    if safezone then
                        local button = safezone:FindFirstChild("button")
                        if button and button:IsA("ImageButton") and button.Visible then
                            if autoShake then
                                local pos = button.AbsolutePosition
                                local size = button.AbsoluteSize
                                VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, true, game:GetService("Players").LocalPlayer, 0)
                                VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, false, game:GetService("Players").LocalPlayer, 0)
                            elseif autoShake2 then
                                GuiService.SelectedObject = button
                                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                            end
                        end
                    end
                end
            end
        end)
    end
end
function ZoneCasting()
    if not ProtectPremium then
        return
    end
    spawn(function()
        while AutoZoneCast do
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character then
                local tool = character:FindFirstChildOfClass("Tool")
                if tool then
                    local hasBobber = tool:FindFirstChild("bobber")
                    if hasBobber then
                        local ropeConstraint = hasBobber:FindFirstChild("RopeConstraint")
                        if ropeConstraint then
                            ropeConstraint.Length = 200000
                        end

                        local platformSize = Vector3.new(10, 1, 10)
                        local platformPositionOffset = Vector3.new(0, -4, 0)

                        -- Custom Zones
                        if selectedZoneCast == "Bluefin Tuna Abundance" then
                            local selectedZone = Workspace.zones.fishing:FindFirstChild("Deep Ocean")
                            if selectedZone then
                                local abundanceValue = selectedZone:FindFirstChild("Abundance")
                                if abundanceValue and abundanceValue.Value == "Bluefin Tuna" then
                                    local bobberPosition = CFrame.new(selectedZone.Position.X, 126.564, selectedZone.Position.Z)
                                    hasBobber.CFrame = bobberPosition
                                    
                                    local platform = Instance.new("Part")
                                    platform.Size = platformSize
                                    platform.Position = hasBobber.Position + platformPositionOffset
                                    platform.Anchored = true
                                    platform.Parent = hasBobber
                                    platform.BrickColor = BrickColor.new("Bright blue")
                                    platform.Transparency = 1.000
                                end
                            end
                        elseif selectedZoneCast == "Swordfish Abundance" then
                            local selectedZone = Workspace.zones.fishing:FindFirstChild("Deep Ocean")
                            if selectedZone then
                                local abundanceValue = selectedZone:FindFirstChild("Abundance")
                                if abundanceValue and abundanceValue.Value == "Swordfish" then
                                    local bobberPosition = CFrame.new(selectedZone.Position.X, 126.564, selectedZone.Position.Z)
                                    hasBobber.CFrame = bobberPosition
                                    
                                    local platform = Instance.new("Part")
                                    platform.Size = platformSize
                                    platform.Position = hasBobber.Position + platformPositionOffset
                                    platform.Anchored = true
                                    platform.Parent = hasBobber
                                    platform.BrickColor = BrickColor.new("Bright blue")
                                    platform.Transparency = 1.000
                                end
                            end
                        else
                            -- Default Zones
                            local selectedZone = Workspace.zones.fishing:FindFirstChild(selectedZoneCast)
                            if selectedZone then
                                local bobberPosition
                                if selectedZoneCast == "FischFright24" then
                                    bobberPosition = CFrame.new(selectedZone.Position.X, 126, selectedZone.Position.Z)
                                elseif selectedZoneCast == "Isonade" then
                                    bobberPosition = CFrame.new(selectedZone.Position.X, 126, selectedZone.Position.Z)
                                elseif selectedZoneCast == "Deep Ocean" then
                                    bobberPosition = CFrame.new(1521, 126, -3543)
                                elseif selectedZoneCast == "Desolate Deep" then
                                    bobberPosition = CFrame.new(-1068, 126, -3108)
                                elseif selectedZoneCast == "Harvesters Spike" then
                                    bobberPosition = CFrame.new(-1234, 126, 1748)
                                elseif selectedZoneCast == "Moosewood Docks" then
                                    bobberPosition = CFrame.new(345, 126, 214)
                                elseif selectedZoneCast == "Moosewood Ocean" then
                                    bobberPosition = CFrame.new(890, 126, 465)
                                elseif selectedZoneCast == "Moosewood Ocean Mythical" then
                                    bobberPosition = CFrame.new(270, 126, 52)
                                elseif selectedZoneCast == "Moosewood Pond" then
                                    bobberPosition = CFrame.new(526, 126, 305)
                                elseif selectedZoneCast == "Mushgrove Water" then
                                    bobberPosition = CFrame.new(2541, 126, -792)
                                elseif selectedZoneCast == "Ocean" then
                                    bobberPosition = CFrame.new(-5712, 126, 4059)
                                elseif selectedZoneCast == "Roslit Bay" then
                                    bobberPosition = CFrame.new(-1650, 126, 504)
                                elseif selectedZoneCast == "Roslit Bay Ocean" then
                                    bobberPosition = CFrame.new(-1825, 126, 946)
                                elseif selectedZoneCast == "Roslit Pond" then
                                    bobberPosition = CFrame.new(-1807, 141, 599)
                                elseif selectedZoneCast == "Roslit Pond Seaweed" then
                                    bobberPosition = CFrame.new(-1804, 141, 625)
                                elseif selectedZoneCast == "Scallop Ocean" then
                                    bobberPosition = CFrame.new(16, 126, 730)
                                elseif selectedZoneCast == "Snowcap Ocean" then
                                    bobberPosition = CFrame.new(2308, 126, 2200)
                                elseif selectedZoneCast == "Snowcap Pond" then
                                    bobberPosition = CFrame.new(2777, 275, 2605)
                                elseif selectedZoneCast == "Sunstone" then
                                    bobberPosition = CFrame.new(-645, 126, -955)
                                elseif selectedZoneCast == "Terrapin Ocean" then
                                    bobberPosition = CFrame.new(-57, 126, 2011)
                                elseif selectedZoneCast == "The Arch" then
                                    bobberPosition = CFrame.new(1076, 126, -1202)
                                elseif selectedZoneCast == "Vertigo" then
                                    bobberPosition = CFrame.new(-75, -740, 1200)
                                end

                                hasBobber.CFrame = bobberPosition
                                
                                local platform = Instance.new("Part")
                                platform.Size = platformSize
                                platform.Position = hasBobber.Position + platformPositionOffset
                                platform.Anchored = true
                                platform.Parent = hasBobber
                                platform.BrickColor = BrickColor.new("Bright blue")
                                platform.Transparency = 1.000
                            end
                        end
                    else
                        print("Bobber not found in the tool.")
                    end
                else
                    print("No tool found in the character.")
                end
            end
            task.wait(0.01)
        end
    end)
end

function AntiAfk2()
    spawn(function()
        while AntiAfk do
            game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("afk"):FireServer(false)
            task.wait(0.01)
        end
    end)
end           
PlayerGUI.ChildAdded:Connect(function(GUI)
    if GUI:IsA("ScreenGui") then
    elseif GUI.Name == "reel" and autoReel then
        local reelfinishedEvent = ReplicatedStorage:WaitForChild("events"):WaitForChild("reelfinished")
        if reelfinishedEvent then
            while GUI do
                task.wait(2)
                reelfinishedEvent:FireServer(100, false)
            end
        end
    end
end)
function Pidoras()
    spawn(function()
        while AutoCast do
            local player = game.Players.LocalPlayer
            local character = player.Character

            if character then
                local tool = character:FindFirstChildOfClass("Tool")

                if tool then
                    local hasBobber = tool:FindFirstChild("bobber")

                    if not hasBobber then
                        local castEvent = tool:FindFirstChild("events") and tool.events:FindFirstChild("cast")

                        if castEvent then
                            local Random = math.random() * (99 - 90) + 90
                            local FRandom = string.format("%.4f", Random)
                            print(FRandom)
                            
                            local Random2 = math.random(90, 99)
                            castEvent:FireServer(Random2)

                            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                            if humanoidRootPart then
                                humanoidRootPart.Anchored = false
                            end
                        end
                    end
                end
                task.wait(1)
            end
        end
    end)
end
NoclipConnection = RunService.Stepped:Connect(function()
    if Noclip == true then
        if LocalCharacter ~= nil then
            for i, v in pairs(LocalCharacter:GetDescendants()) do
                if v:IsA("BasePart") and v.CanCollide == true then
                    v.CanCollide = false
                end
            end
        end
    end
end)

local initialPosition

function rememberPosition()
    spawn(function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local rootPart = character:WaitForChild("HumanoidRootPart")
 
        local initialCFrame = rootPart.CFrame
 
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        bodyVelocity.Parent = rootPart
 
        local bodyGyro = Instance.new("BodyGyro")
        bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
        bodyGyro.D = 100
        bodyGyro.P = 10000
        bodyGyro.CFrame = initialCFrame
        bodyGyro.Parent = rootPart
 
        while AutoFreeze do
            rootPart.CFrame = initialCFrame
            task.wait(0.01)
        end
 
        if bodyVelocity then
            bodyVelocity:Destroy()
        end
        if bodyGyro then
            bodyGyro:Destroy()
        end
    end)
end



    local DropdownShake = Tabs.Main:AddDropdown("DropdownShake", {
        Title = "Select Auto Shake Mode:",
        Description = "For the Mouse Method: Please ensure that the UI is hidden and the chat is toggled off to enable the auto-shake functionality.",
        Values = {"Mouse", "Phantom"},
        Multi = false,
        Default = 1,
    })
    DropdownShake:OnChanged(function(Value)
        ShakeMode = Value
        print("Auto Shake Mode:", Value)
    end)   

    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "AutoShake Delay",
        Description = "",
        Default = 2,
        Min = 0.2,
        Max = 1,
        Rounding = 1,
        Callback = function(Value)
            autoShakeDelay = Value
        end
    })
    Slider:OnChanged(function(Value)
        autoShakeDelay = Value
    end)
    Slider:SetValue(0.5)
    
    local autoReelCastShakeT = Tabs.Main:AddToggle("autoReelCastShakeT", {Title = "Auto Fish", Default = false })
    autoReelCastShakeT:OnChanged(function(Value)
        autoReel = Value
        AutoCast = Value
        if AutoCast then
            Pidoras()
        end
        if ShakeMode == "Mouse" then
            autoShake = Value
        elseif ShakeMode == "Phantom" then
            autoShake2 = Value
        end
        AutoFish = Value
        AutoFish5()
        if AutoCast == true and LocalCharacter:FindFirstChildOfClass("Tool") ~= nil then
            local Tool = LocalCharacter:FindFirstChildOfClass("Tool")
            if Tool:FindFirstChild("events"):WaitForChild("cast") ~= nil then
                local Random = math.random() * (99 - 90) + 90
                local FRandom = string.format("%.4f", Random)
                print(FRandom)
                local Random2 = math.random(90, 99)
                Tool.events.cast:FireServer(Random2)
            end
        end
    end)




-- Variable to store the selected position
local selectedPosition = nil
local teleporting = false

-- Create the paragraph
local positionParagraph = Tabs.Main:AddParagraph({
    Title = "Position :",
    Content = "" -- Initial content
})

-- Create the button
Tabs.Main:AddButton({
    Title = "Select Position",
    Description = "",
    Callback = function()
        local player = game.Players.LocalPlayer
        if not player then return end

        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

        if humanoidRootPart then
            local position = humanoidRootPart.Position
            selectedPosition = CFrame.new(position) * humanoidRootPart.CFrame.Rotation
            -- Save both position and orientation
            positionParagraph:SetTitle("Position : " .. 
                tostring(math.floor(position.X)) .. " X " ..
                tostring(math.floor(position.Y)) .. " Y " ..
                tostring(math.floor(position.Z)) .. " Z")
        else
            positionParagraph:SetTitle("Error: Unable to find player position.")
        end
    end
})

-- Create the toggle
Tabs.Main:AddToggle("MyToggle", {
    Title = "Teleport to selected location",
    Description = "",
    Default = false,
    Callback = function(state)
        if state then
            print("Toggle On")
            teleporting = true
            -- Start powerful teleport loop
            while teleporting do
                local player = game.Players.LocalPlayer
                if player and selectedPosition then
                    local character = player.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        character.HumanoidRootPart.CFrame = selectedPosition
                    end
                end
                task.wait() -- Extremely short wait time for rapid teleporting
            end
        else
            print("Toggle Off")
            teleporting = false -- Stop the teleport loop
        end
    end
})





Tabs.Main:AddButton({
    Title = "Sell Holding Fish",
    Description = "",
    Callback = function()
        Workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sell"):InvokeServer()
	end
})




Tabs.Main:AddButton({
    Title = "Sell All Fishes",
    Description = "",
    Callback = function()
        Workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()
	end
})

Tabs.Main:AddButton({
    Title = "Appraise fish",
    Description = "",
    Callback = function()
        Workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Appraiser"):WaitForChild("appraiser"):WaitForChild("appraise"):InvokeServer()
	end
})





local Toggle = Tabs.Main:AddToggle("MyToggle",  
{
    Title = "Bypass Radar",  
    Description = "",
    Default = false,
    Callback = function(state)
        -- Only execute if the state actually changes
        if state then
            -- Enable radar when toggle is on
            for _, v in pairs(game:GetService("CollectionService"):GetTagged("radarTag")) do
                if v:IsA("BillboardGui") or v:IsA("SurfaceGui") then
                    v.Enabled = true
                end
            end
        else
            -- Disable radar when toggle is off
            for _, v in pairs(game:GetService("CollectionService"):GetTagged("radarTag")) do
                if v:IsA("BillboardGui") or v:IsA("SurfaceGui") then
                    v.Enabled = false
                end
            end
        end
    end
})




-- Define GetPosition function to fetch the player's current position
    local function GetPosition()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:WaitForChild("HumanoidRootPart")
    
        if rootPart then
            local position = rootPart.Position
            return {position.X, position.Y, position.Z}
        else
            -- Fallback if the HumanoidRootPart is missing
            return {0, 0, 0}
        end
    end
    
    -- Define ExportValue function to round to 1 decimal place
    local function ExportValue(value)
        -- Round the value to 1 decimal place and convert to string
        return string.format("%.1f", value)
    end
    
    -- Initialize BypassGpsLoop
    local BypassGpsLoop = nil
    
    -- Add Toggle
    local Toggle = Tabs.Main:AddToggle("Bypass GPS", {
        Title = "Bypass Gps",
        Description = "",
        Default = false,
        Callback = function(Value)
            if Value then
                local XyzClone = game:GetService("ReplicatedStorage").resources.items.items.GPS.GPS.gpsMain.xyz:Clone()
                XyzClone.Parent = game.Players.LocalPlayer.PlayerGui:WaitForChild("hud"):WaitForChild("safezone"):WaitForChild("backpack")
                
                local Pos = GetPosition()
                local StringInput = string.format("%s, %s, %s", ExportValue(Pos[1]), ExportValue(Pos[2]), ExportValue(Pos[3]))
                XyzClone.Text = "<font color='#ff4949'>X</font><font color='#a3ff81'>Y</font><font color='#626aff'>Z</font>: " .. StringInput
    
                -- Start BypassGpsLoop
                BypassGpsLoop = game:GetService("RunService").Heartbeat:Connect(function()
                    local Pos = GetPosition()
                    local StringInput = string.format("%s, %s, %s", ExportValue(Pos[1]), ExportValue(Pos[2]), ExportValue(Pos[3]))
                    XyzClone.Text = "<font color='#ff4949'>X</font><font color='#a3ff81'>Y</font><font color='#626aff'>Z</font>: " .. StringInput
                end)
            else
                -- Destroy the cloned object if it exists
                local PlayerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
                local Backpack = PlayerGui:WaitForChild("hud"):WaitForChild("safezone"):WaitForChild("backpack")
                if Backpack:FindFirstChild("xyz") then
                    Backpack:FindFirstChild("xyz"):Destroy()
                end
    
                -- Disconnect the loop if it exists
                if BypassGpsLoop then
                    BypassGpsLoop:Disconnect()
                    BypassGpsLoop = nil
                end
            end
        end
    })
    




local lastState = false  -- Initialize lastState to false (the toggle's default state)

local Toggle = Tabs.Main:AddToggle("MyToggle",  
{
    Title = "AntiCheat",  
    Description = "", 
    Default = false,
    Callback = function(state)
        if state ~= lastState then  -- Check if the state has changed
            if state then  -- If toggle is enabled
                Fluent:Notify({
                    Title = "Anti Cheat Enable", 
                    Content = "Now Do Whatever You Want You're Immortal", 
                    Duration = 5 -- Set to 5 seconds
                })
            else  -- If toggle is disabled
                Fluent:Notify({
                    Title = "Anti Cheat Disable", 
                    Content = "Chance of getting ban increased by 43%", 
                    Duration = 5 -- Set to 5 seconds
                })
            end
            lastState = state  -- Update lastState to the current state
        end
    end 
})





Tabs.Main:AddButton({
    Title = "AutoReel + AutoShake + AutoCast", -- My old script but i made changes to it now
    Description = "Old One",
    Callback = function()
        local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Turtle-Brand/Turtle-Lib/main/source.lua"))()


        local window = library:Window("NEOX HUB", {Color = Color3.fromRGB(25, 35, 45), Size = UDim2.new(0, 500, 0, 400)})
        
        
        local Players = game:GetService('Players')
        local CoreGui = game:GetService('StarterGui')
        local GuiService = game:GetService('GuiService')
        local ReplicatedStorage = game:GetService('ReplicatedStorage')
        local ContextActionService = game:GetService('ContextActionService')
        local VirtualInputManager = game:GetService('VirtualInputManager')
        local UserInputService = game:GetService('UserInputService')
        
        local LocalPlayer = Players.LocalPlayer
        
        
        local enabled = false
        local rod = nil
        local progress = false
        local finished = false
        local loopPosition
        local keybind = Enum.KeyCode.X
        local totalCatches = 0
        
        
        local function ShowNotification(message, duration)
            CoreGui:SetCore('SendNotification', {
                Title = 'NEOX HUB',
                Text = message,
                Duration = duration or 0.5,  
                Button1Text = "Okay"
            })
        end
        
        
        local function ToggleFarm(_, state)
            if state == Enum.UserInputState.Begin then
                enabled = not enabled
                
                if enabled then
                    loopPosition = LocalPlayer.Character.HumanoidRootPart.Position
                    farmStartTime = tick()
                    ShowNotification("Auto Farm: Enabled", 1.5)
                else
                    finished = false
                    progress = false
                    GuiService.SelectedObject = nil
                    
                    if rod then
                        rod.events.reset:FireServer()
                    end
                    
                    ShowNotification("Auto Farm: Disabled", 1.5)
                end
            end
        end
        
        
        LocalPlayer.Character.ChildAdded:Connect(function(child)
            if child:IsA('Tool') and child.Name:lower():find('rod') then
                rod = child
            end
        end)
        
        
        LocalPlayer.Character.ChildRemoved:Connect(function(child)
            if child == rod then
                enabled = false
                finished = false
                progress = false
                rod = nil
                GuiService.SelectedObject = nil
            end
        end)
        
        
        LocalPlayer.PlayerGui.DescendantAdded:Connect(function(descendant)
            if enabled then
                if descendant.Name == 'button' and descendant.Parent.Name == 'safezone' then
                    task.wait(0.3)
                    GuiService.SelectedObject = descendant
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                    task.wait(0.3)
                    GuiService.SelectedObject = nil
                elseif descendant.Name == 'playerbar' and descendant.Parent.Name == 'bar' then
                    finished = true
                    descendant:GetPropertyChangedSignal('Position'):Wait()
                    ReplicatedStorage.events.reelfinished:FireServer(100, true)
                    totalCatches = totalCatches + 1
                end
            end
        end)
        
        
        LocalPlayer.PlayerGui.DescendantRemoving:Connect(function(descendant)
            if descendant.Name == 'reel' then
                finished = false
                progress = false
            end
        end)
        
        
        task.spawn(function()
            while true do
                if enabled and not progress then
                    if rod then
                        progress = true
                        task.wait(0.5)
                        rod.events.reset:FireServer()
                        rod.events.cast:FireServer(100.5)
                    end
                end
                
        
        
                task.wait()
            end
        end)
        
        
        task.spawn(function()
            while true do
                if enabled then
                    LocalPlayer.Character.HumanoidRootPart.Position = loopPosition
                end
                task.wait(0.75)
            end
        end)
        
        
        if not UserInputService.KeyboardEnabled then
            ContextActionService:BindAction('ToggleFarm', ToggleFarm, false, keybind, Enum.UserInputType.Touch)
            ContextActionService:SetTitle('ToggleFarm', 'Toggle Farm')
            ContextActionService:SetPosition('ToggleFarm', UDim2.new(0.9, -50, 0.9, -150))
            ShowNotification('Press the onscreen button to enable/disable', 3)
        else
            ContextActionService:BindAction('ToggleFarm', ToggleFarm, false, keybind)
            ShowNotification(string.format("NEOX HUB", keybind.Name), 3)
        end
        
        
        local farmStatusLabel = window:Label("Auto Farm Status: OFF", Color3.fromRGB(255, 165, 0))
        local catchCountLabel = window:Label("Catches: 0", Color3.fromRGB(127, 143, 166))
        
        task.spawn(function()
            while true do
                if enabled then
                    farmStatusLabel.Text = "Auto Farm Status: ON"
                else
                    farmStatusLabel.Text = "Auto Farm Status: OFF"
                end
                catchCountLabel.Text = "Fishes Catches: " .. totalCatches
                task.wait(1)
            end
        end)
        
        window:Label("BETTER VERSION WITHOUT BUGS", Color3.fromRGB(255, 0, 0))  -- Eye-catching label color
        window:Label("How To Enable : X - ON/OFF", Color3.fromRGB(255, 165, 0))  -- Add a bright color for attention
	end
})









local Toggle = Tabs.Misc:AddToggle("MyToggle", 
{
    Title = "Freeze Character", 
    Description = "",
    Default = false,
    Callback = function(state)
        local player = game:GetService("Players").LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            if state then
                player.Character.HumanoidRootPart.Anchored = true
                print("bro saw baddie and bro got Shocked.")
            else
                player.Character.HumanoidRootPart.Anchored = false
                print("bro saw ugly ass and start moving.")
            end
        else
            warn("Player or HumanoidRootPart not found!")
        end
    end
})




Tabs.Misc:AddButton({
    Title = "Anti AFK",
    Description = "",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/hassanxzayn-lua/Anti-afk/main/antiafkbyhassanxzyn"))();
	end
})


local UnlimitedOxygenToggle = Tabs.Misc:AddToggle("UnlimitedOxygenToggle", 
{
    Title = "Unlimited Oxygen", 
    Description = "",
    Default = false,
    Callback = function(state)
        local LocalPlayer = game.Players.LocalPlayer
        local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

        if state then
            if LocalCharacter and LocalCharacter:FindFirstChild("client") and LocalCharacter.client:FindFirstChild("oxygen") then
                local oxygen = LocalCharacter.client.oxygen
                if oxygen and oxygen.Enabled then
                    oxygen.Enabled = false
                    print("Bro Is Immortal ahhh")
                end
            end
            
            LocalPlayer.CharacterAdded:Connect(function()
                LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                if LocalCharacter and LocalCharacter:FindFirstChild("client") and LocalCharacter.client:FindFirstChild("oxygen") then
                    local oxygen = LocalCharacter.client.oxygen
                    if oxygen and oxygen.Enabled then
                        oxygen.Enabled = false
                    end
                end
            end)
        else
            if LocalCharacter and LocalCharacter:FindFirstChild("client") and LocalCharacter.client:FindFirstChild("oxygen") then
                local oxygen = LocalCharacter.client.oxygen
                if oxygen and not oxygen.Enabled then
                    oxygen.Enabled = true
                    print("Oxygen is now enabled.")
                end
            end
        end
    end
})




local UnlimitedOxygenToggle = Tabs.Misc:AddToggle("UnlimitedOxygenToggle", 
{
    Title = "Unlimited Oxygen (peaks)", 
    Description = "", 
    Default = false, 
    Callback = function(state)
        local LocalPlayer = game.Players.LocalPlayer
        local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

        if state then
            if LocalCharacter and LocalCharacter:FindFirstChild("client") and LocalCharacter.client:FindFirstChild("oxygen(peaks)") then
                local oxygenPeaks = LocalCharacter.client["oxygen(peaks)"]
                if oxygenPeaks and oxygenPeaks.Enabled then
                    oxygenPeaks.Enabled = false
                    print("Bro Is Immortal ahhh")
                end
            end
            
            -- Ensure this behavior persists if the character respawns
            LocalPlayer.CharacterAdded:Connect(function()
                LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                if LocalCharacter and LocalCharacter:FindFirstChild("client") and LocalCharacter.client:FindFirstChild("oxygen(peaks)") then
                    local oxygenPeaks = LocalCharacter.client["oxygen(peaks)"]
                    if oxygenPeaks and oxygenPeaks.Enabled then
                        oxygenPeaks.Enabled = false
                    end
                end
            end)
        else
            -- Re-enable oxygen(peaks) when toggled off
            if LocalCharacter and LocalCharacter:FindFirstChild("client") and LocalCharacter.client:FindFirstChild("oxygen(peaks)") then
                local oxygenPeaks = LocalCharacter.client["oxygen(peaks)"]
                if oxygenPeaks and not oxygenPeaks.Enabled then
                    oxygenPeaks.Enabled = true
                    print("Oxygen(peaks) is now enabled.")
                end
            end
        end
    end
})










local UnlimitedTempToggle = Tabs.Misc:AddToggle("UnlimitedTempToggle", 
{
    Title = "Unlimited Temprature", 
    Description = "",
    Default = false,
    Callback = function(state)
        local LocalPlayer = game.Players.LocalPlayer
        local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

        if state then
            if LocalCharacter and LocalCharacter:FindFirstChild("client") and LocalCharacter.client:FindFirstChild("temperature") then
                local temperature = LocalCharacter.client.temperature
                if temperature and temperature.Enabled then
                    temperature.Enabled = false
                    print("Bro Is Immortal ahhh")
                end
            end
            
            LocalPlayer.CharacterAdded:Connect(function()
                LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                if LocalCharacter and LocalCharacter:FindFirstChild("client") and LocalCharacter.client:FindFirstChild("temperature") then
                    local temperature = LocalCharacter.client.temperature
                    if temperature and temperature.Enabled then
                        temperature.Enabled = false
                    end
                end
            end)
        else
            if LocalCharacter and LocalCharacter:FindFirstChild("client") and LocalCharacter.client:FindFirstChild("temperature") then
                local temperature = LocalCharacter.client.temperature
                if temperature and not temperature.Enabled then
                    temperature.Enabled = true
                    print("temperature is now enabled.")
                end
            end
        end
    end
})





local WalkonwaterToggle = Tabs.Misc:AddToggle("Walk On Water",  
{
    Title = "Walk On Water",  
    Description = "", 
    Default = false,
    Callback = function(Value)
        for i,v in pairs(workspace.zones.fishing:GetChildren()) do
            if v.Name == "Ocean" then
                v.CanCollide = Value
            end
        end
    end
})




local WalkOnWaterZone = Tabs.Misc:AddDropdown("WalkOnWaterZone", {
    Title = "Walk On Water Zone",
    Values = {"Ocean", "Desolate Deep", "The Depths"},
    Multi = false,
    Default = "Ocean",
})
WalkOnWaterZone:OnChanged(function(Value)
    WalkZone = Value
end)


local DisableSwimmingToggle = Tabs.Misc:AddToggle("DisableSwimmingToggle", 
{
    Title = "Disable Swimming", 
    Description = "",
    Default = false,
    Callback = function(state)
        local LocalPlayer = game.Players.LocalPlayer
        local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

        if LocalCharacter and LocalCharacter:FindFirstChild("Humanoid") then
            local Humanoid = LocalCharacter:FindFirstChild("Humanoid")
            if Humanoid then
                if state then
                    Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
                    print("bro why you stop swimming")
                else
                    Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
                    print("bro start swimming")
                end
            end
        else
            warn("Humanoid not found!")
        end
    end
})

local PlayerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local JustUI = Tabs.Misc:AddToggle("JustUI", {Title = "Show/Hide UIs", Default = true})
JustUI:OnChanged(function()
    local BlackShow = JustUI.Value
    if PlayerGui:FindFirstChild("hud") and PlayerGui.hud:FindFirstChild("safezone") then
        PlayerGui.hud.safezone.Visible = BlackShow
    else
        warn("hud or safezone not found in PlayerGui")
    end
end)


Tabs.Misc:AddButton({
    Title = "Remove AFK Tag", 
    Description = "",
    Callback = function()
        -- Access ReplicatedStorage
        local replicatedStorage = game:GetService("ReplicatedStorage")
        
        -- Try to find the 'afk' remote event under 'events'
        local afkEvent = replicatedStorage:FindFirstChild("events") and replicatedStorage.events:FindFirstChild("afk")
        
        -- If the remote event exists, remove it
        if afkEvent then
            afkEvent:Destroy()
            print("AFK event removed.")
        else
            print("AFK event not found.")
        end
    end
})


local BlackGui = Instance.new("ScreenGui")
BlackGui.Name = "BlackGui"
BlackGui.ResetOnSpawn = false
local blackFrame = Instance.new("Frame")
blackFrame.Name = "BlackFrame"
blackFrame.Size = UDim2.new(1, 0, 1, 0)
blackFrame.BackgroundColor3 = Color3.new(0, 0, 0)
blackFrame.BackgroundTransparency = 1
blackFrame.Parent = BlackGui
BlackGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local WhiteGui = Instance.new("ScreenGui")
WhiteGui.Name = "WhiteGui"  -- Изменено здесь
WhiteGui.ResetOnSpawn = false
local whiteFrame = Instance.new("Frame") -- Изменено здесь
whiteFrame.Name = "WhiteFrame" -- Изменено здесь
whiteFrame.Size = UDim2.new(1, 0, 1, 0)
whiteFrame.BackgroundColor3 = Color3.new(1, 1, 1)  -- Цвет белого фрейма
whiteFrame.BackgroundTransparency = 1
whiteFrame.Parent = WhiteGui
WhiteGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local BlackGui5 = Tabs.Misc:AddToggle("BlackGui5", {Title = "Black Screen", Default = false })
BlackGui5:OnChanged(function()
    local Black123 = BlackGui5.Value
    if Black123 then
        blackFrame.BackgroundTransparency = 0
    else
        blackFrame.BackgroundTransparency = 1
    end
end)

local WhiteGui5 = Tabs.Misc:AddToggle("WhiteGui5", {Title = "White Screen", Default = false })
WhiteGui5:OnChanged(function()
    local White123 = WhiteGui5.Value
    if White123 then
        whiteFrame.BackgroundTransparency = 0  -- Изменено здесь
    else
        whiteFrame.BackgroundTransparency = 1  -- Изменено здесь
    end
end)


Tabs.Misc:AddButton({
    Title = "Infiniteyield Reborn",
    Description = "",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/RyXeleron/infiniteyield-reborn/refs/heads/scriptblox/source"))()
    end
})



local Toggle = Tabs.Misc:AddToggle("MyToggle", {
    Title = "Hide Leaderstats",
    Description = "",
    Default = false,
    Callback = function(state)
        local player = game.Players.LocalPlayer
        local leaderstats = player:FindFirstChild("leaderstats") -- Locate the leaderstats folder

        if leaderstats then
            -- Locate C$ and Level
            local cStat = leaderstats:FindFirstChild("C$")
            local levelStat = leaderstats:FindFirstChild("Level")

            if state then
                -- Hide the leaderstats and display "Hidden" for StringValue and 0 for NumberValue
                if cStat and cStat:IsA("StringValue") then
                    cStat:SetAttribute("OriginalValue", cStat.Value) -- Save the original value
                    cStat.Value = "Hidden" -- Replace with "Hidden"
                end

                if levelStat and levelStat:IsA("NumberValue") then
                    levelStat:SetAttribute("OriginalValue", levelStat.Value) -- Save the original value
                    levelStat.Value = 0 -- Replace with 0
                end
            else
                -- Restore the leaderstats to their original values
                if cStat and cStat:IsA("StringValue") then
                    local originalValue = cStat:GetAttribute("OriginalValue")
                    if originalValue then
                        cStat.Value = originalValue -- Restore the saved value
                    end
                end

                if levelStat and levelStat:IsA("NumberValue") then
                    local originalValue = levelStat:GetAttribute("OriginalValue")
                    if originalValue then
                        levelStat.Value = originalValue -- Restore the saved value
                    end
                end
            end
        else
            warn("Leaderstats not found!")
        end
    end,
})






local Section = Tabs.Misc:AddSection("Character")




local TeleportToggle = Tabs.Misc:AddToggle("TeleportToggle", 
{
    Title = "T + Left Click Teleport", 
    Description = "",
    Default = false,
    Callback = function(Value)
        if not hasUserToggled and not isTeleportEnabled then
            hasUserToggled = true
            isTeleportEnabled = Value
            return
        end

        isTeleportEnabled = Value
        if Value then
            if not connection then
                connection = game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
                    if not gameProcessed and isTeleportEnabled and input.UserInputType == Enum.UserInputType.MouseButton1 then
                        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.T) then
                            local player = game:GetService("Players").LocalPlayer
                            local mouse = player:GetMouse()
                            player.Character:MoveTo(Vector3.new(mouse.Hit.x, mouse.Hit.y, mouse.Hit.z))
                        end
                    end
                end)
            end
        else
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end
})


local InfiniteJumpToggle = Tabs.Misc:AddToggle("InfiniteJumpToggle", 
{
    Title = "Infinite Jumps", 
    Description = "",
    Default = false,
    Callback = function(Value)
        _G.infinjump = Value
    end
})

if not _G.infinJumpStarted then
    _G.infinJumpStarted = true
    _G.infinjump = false

    local plr = game:GetService('Players').LocalPlayer
    local m = plr:GetMouse()

    m.KeyDown:Connect(function(key)
        if _G.infinjump then
            if key:byte() == 32 then
                local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
                if humanoid then
                    humanoid:ChangeState('Jumping')
                    wait()
                    humanoid:ChangeState('Seated')
                end
            end
        end
    end)
end



local Noclip = nil
local Clip = true  -- Set Clip to true initially, meaning no noclip at the start

-- Function to enable noclip
function noclip()
	Clip = false
	local function Nocl()
		if Clip == false and game.Players.LocalPlayer.Character ~= nil then
			for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
				if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
					v.CanCollide = false
				end
			end
		end
		wait(0.21)  -- Basic optimization
	end
	-- Run noclip continuously
	Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

-- Function to disable noclip (restore collision)
function clip()
	if Noclip then 
		Noclip:Disconnect()  -- Disconnect the running noclip function
	end
	Clip = true  -- Set Clip to true, meaning collision is restored
	-- Restore collision to all parts
	if game.Players.LocalPlayer.Character then
		for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
			if v:IsA('BasePart') and v.CanCollide == false then
				v.CanCollide = true
			end
		end
	end
end

-- The Toggle code that controls noclip/clip
local Toggle = Tabs.Misc:AddToggle("MyToggle", {
    Title = "Noclip",
    Description = "",
    Default = false,  -- Default to off
    Callback = function(state)
        if state then
            noclip()  -- Enable noclip when toggle is on
        else
            clip()    -- Disable noclip and restore collision when toggle is off
        end
    end
})




local Slider = Tabs.Misc:AddSlider("SpeedSlider", 
{
    Title = "WalkSpeed",
    Description = "",
    Default = 16,
    Min = 16,
    Max = 500,
    Rounding = 1,
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
    end
})

local Slider = Tabs.Misc:AddSlider("JumpSlider", 
{
    Title = "Jump Power",
    Description = "",
    Default = 50,
    Min = 50,
    Max = 500,
    Rounding = 1,
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
    end
})

local runService = game:GetService("RunService")
local event -- Declare the event variable for reuse

local Slider = Tabs.Misc:AddSlider("GravitySlider", 
{
    Title = "Gravity", -- The title of the slider
    Description = "", -- Description for the slider
    Default = 196, -- Default gravity (Roblox default)
    Min = 0, -- Minimum gravity value
    Max = 500, -- Maximum gravity value
    Rounding = 1, -- Rounding to whole numbers
    Callback = function(Value)
        print("Gravity slider changed to:", Value) -- Debug log
        -- Disconnect any existing RenderStepped event to avoid stacking
        if event then
            event:Disconnect()
        end
        -- Connect RenderStepped to dynamically update the gravity
        event = runService.RenderStepped:Connect(function()
            workspace.Gravity = Value
        end)
    end
})

local Slider = Tabs.Misc:AddSlider("AssSlider", 
{
    Title = "HipHeight", -- The title of the slider
    Description = "", -- Description for the slider
    Default = 0, -- Default gravity (Roblox default)
    Min = 0, -- Minimum gravity value
    Max = 500, -- Maximum gravity value
    Rounding = 1, -- Rounding to whole numbers
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.HipHeight = Value
    end
})



local Input = Tabs.Misc:AddInput("FOVInput", 
{
    Title = "Change FOV", -- Title of the input box
    Description = "", -- Description
    Default = "70", -- Default FOV value
    Placeholder = "Enter FOV value", -- Placeholder text
    Numeric = true, -- Only allows numeric input
    Finished = true, -- Callback is triggered only when pressing Enter
    Callback = function(Value)
        local fov = tonumber(Value) -- Convert input to a number
        if fov then
            game.Workspace.Camera.FieldOfView = fov -- Set the Camera's FOV
            print("FOV set to:", fov) -- Debug log
        else
            warn("Invalid FOV value entered!") -- Warn if the input is not a number
        end
    end
})



-- Make sure to define RunService at the start
local RunService = game:GetService("RunService")

-- Declare DayOnlyLoop globally to maintain its state
local DayOnlyLoop

local DayToggle = Tabs.Weather:AddToggle("Only Day",  
{
    Title = "Only Day",  
    Description = "", 
    Default = false,
    Callback = function(Value)
        if Value then
            DayOnlyLoop = RunService.Heartbeat:Connect(function()
                game:GetService("Lighting").TimeOfDay = "12:00:00"
            end)
        else
            if DayOnlyLoop then
                DayOnlyLoop:Disconnect()
                DayOnlyLoop = nil
            end
        end
    end
})




-- Declare NightOnlyLoop globally to maintain its state
local NightOnlyLoop

local NightToggle = Tabs.Weather:AddToggle("Only Night",  
{
    Title = "Only Night",  
    Description = "", 
    Default = false,
    Callback = function(Value)
        if Value then
            -- If enabled, start the loop to set time to night (10:00 PM)
            NightOnlyLoop = RunService.Heartbeat:Connect(function()
                game:GetService("Lighting").TimeOfDay = "22:00:00"
            end)
        else
            -- If disabled, disconnect the loop and reset the variable
            if NightOnlyLoop then
                NightOnlyLoop:Disconnect()
                NightOnlyLoop = nil
            end
        end
    end
})







local removefogToggle = Tabs.Weather:AddToggle("Remove Fog",  
{
    Title = "Remove Fog",  
    Description = "",  
    Default = false, -- Toggle starts OFF
    Callback = function(Value)
        if Value then
            -- This runs ONLY when the toggle is turned ON
            local sky = game:GetService("Lighting"):FindFirstChild("Sky")
            if sky then
                sky.Parent = game:GetService("Lighting").bloom
            end
        else
            -- This runs ONLY when the toggle is turned OFF
            local skyInBloom = game:GetService("Lighting").bloom:FindFirstChild("Sky")
            if skyInBloom then
                skyInBloom.Parent = game:GetService("Lighting")
            end
        end
    end
})




local ReplicatedStorage = game:GetService("ReplicatedStorage")

local clearToggle = Tabs.Weather:AddToggle("Clear Weather",   
{
    Title = "Clear Weather",   
    Description = "", 
    Default = false,
    Callback = function(Value)
        local OldWEA = ReplicatedStorage:WaitForChild("world"):WaitForChild("weather").Value
        if Value then
            ReplicatedStorage.world.weather.Value = 'Clear' 
        else
            ReplicatedStorage.world.weather.Value = OldWEA
        end
    end
})






Tabs.Teleport:AddButton({
    Title = "Create Safe Zone",
    Callback = function()
        -- Get the local player's character and HumanoidRootPart
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local HumanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        
        if not HumanoidRootPart then
            warn("HumanoidRootPart not found!")
            return
        end

        -- Create the safe zone
        local SafeZone = Instance.new("Part")
        SafeZone.Size = Vector3.new(30, 1, 30)
        SafeZone.Position = Vector3.new(math.random(-2000, 2000), math.random(50000, 90000), math.random(-2000, 2000))
        SafeZone.Anchored = true
        SafeZone.BrickColor = BrickColor.new("White") -- A unique color
        SafeZone.TopSurface = Enum.SurfaceType.Studs
        SafeZone.Material = Enum.Material.Plastic -- Make it glow
        SafeZone.Transparency = 0.2 -- Slightly transparent for effect
        SafeZone.Parent = game.Workspace

        -- Add a SurfaceGui to the part
        local surfaceGui = Instance.new("SurfaceGui")
        surfaceGui.Face = Enum.NormalId.Top -- Place the GUI on the top of the part
        surfaceGui.Adornee = SafeZone -- Attach the GUI to the part
        surfaceGui.Parent = SafeZone

        -- Add the first TextLabel for "NEOX HUB"
        local neoxHubLabel = Instance.new("TextLabel")
        neoxHubLabel.Size = UDim2.new(1, 0, 0.5, 0) -- Cover the upper half of the surface
        neoxHubLabel.Position = UDim2.new(0, 0, 0, 0) -- Place it at the top
        neoxHubLabel.BackgroundTransparency = 1 -- Make the background transparent
        neoxHubLabel.Text = "NEOX HUB" -- Display text
        neoxHubLabel.TextColor3 = Color3.new(1, 0, 0) -- Red text color
        neoxHubLabel.TextScaled = true -- Automatically scale text size
        neoxHubLabel.Font = Enum.Font.SourceSansBold -- Set the font style
        neoxHubLabel.Parent = surfaceGui

        -- Add the second TextLabel for "Join our Discord"
        local discordLabel = Instance.new("TextLabel")
        discordLabel.Size = UDim2.new(1, 0, 0.5, 0) -- Cover the lower half of the surface
        discordLabel.Position = UDim2.new(0, 0, 0.5, 0) -- Place it below the first text
        discordLabel.BackgroundTransparency = 1 -- Make the background transparent
        discordLabel.Text = "Join our Discord" -- Display text
        discordLabel.TextColor3 = Color3.new(0, 0, 1) -- Blue text color
        discordLabel.TextScaled = true -- Automatically scale text size
        discordLabel.Font = Enum.Font.SourceSansBold -- Set the font style
        discordLabel.Parent = surfaceGui

        -- Teleport the player to the safe zone
        HumanoidRootPart.CFrame = SafeZone.CFrame + Vector3.new(0, 5, 0)
    end
})









local TeleportDropdown = Tabs.Teleport:AddDropdown("TeleportLocationsDropdown", {
    Title = "Teleport To Locations",
    Description = "",
    Values = {
        "Workshop", "Santa", "Merlin", "Forsaken", "Crafting", "Camp1", "Camp2", "Ancient Isle", "Ancientarchives", "North Glider", "???", "Final Puzzle", "The Depth Maze Exit", "Lever Puzzle", "The Depth Lobby", "Deep Shop", "Ice Puzzle", "Archive", "Desolate", "Mountain Start", "Elf", "Altar", "arch", "The_Depth", "birch", "Archeological Site", "brine", "deep", "enchant", "executive", "keepers",
        "mod_house", "moosewood", "mushgrove", "roslit", "snow", "snowcap", "spike", "statue", "sunstone",
        "swamp", "terrapin", "trident", "vertigo", "volcano", "wilson", "wilsons_rod"
    },
    Multi = false,
    Default = "None",
    Callback = function(Value)
        local teleportLocations = {
            ["Workshop"] = Vector3.new(-156.24490356445312, 364.8857727050781, -9462.23828125),
            ["Merlin"] = Vector3.new(-949.0145874023438, 222.05545043945312, -985.9754028320312),
            ["Ancientarchives"] = Vector3.new(-3155.022216796875, -754.818115234375, 2193.136962890625),
            ["Forsaken"] = Vector3.new(-2498.24609375, 136.9497528076172, 1624.852294921875),
            ["Crafting"] = Vector3.new(-3159.9951171875, -745.614013671875, 1684.16796875),
            ["Camp1"] = Vector3.new(20208.041015625, 208.42010498046875, 5278.67578125),
            ["Camp2"] = Vector3.new(19756.58984375, 415.43707275390625, 5406.69970703125),
            ["Ancient Isle"] = Vector3.new(5948.79052734375, 154.9259033203125, 482.23583984375),
            ["North Glider"] = Vector3.new(20240.86328125, 756.5258178710938, 5756.46630859375),
            ["Santa"] = Vector3.new(-142.2449951171875, 364.6358337402344, -9498.23828125),
            ["???"] = Vector3.new(-1479.493896484375, -225.71063232421875, -2391.423095703125),
            ["Final Puzzle"] = Vector3.new(19963.97265625, 1137.889404296875, 5401.83544921875),
            ["The Depth Maze Exit"] = Vector3.new(978.142822265625, -701.1101684570312, 1253.7423095703125),
            ["Lever Puzzle"] = Vector3.new(19955.671875, 586.853759765625, 5571.53564453125),
            ["The Depth Lobby"] = Vector3.new(66.99270629882812, -704.9685668945312, 1230.847900390625),
            ["Deep Shop"] = Vector3.new(-979.1976318359375, -244.91102600097656, -2699.8740234375),
            ["Ice Puzzle"] = Vector3.new(19232.732421875, 395.87213134765625, 6010.345703125),
            ["Archive"] = Vector3.new(-3157.536865234375, -754.8175659179688, 2214.496826171875),
            ["Desolate"] = Vector3.new(-1654.96728515625, -213.67941284179688, -2845.9521484375),
            ["Mountain Start"] = Vector3.new(19558.537109375, 132.67010498046875, 5301.47802734375),
            ["Elf"] = Vector3.new(-10.68837833404541, 322.271728515625, -9288.181640625),
            ["Altar"] = Vector3.new(1296.320068359375, -808.5519409179688, -298.93817138671875),
            ["The_Depth"] = Vector3.new(568.1527099609375, -704.4259643554688, 1230.847900390625),
            ["Archeological Site"] = Vector3.new(4050, 130, 50),
            ["arch"] = Vector3.new(998.966796875, 126.6849365234375, -1237.1434326171875),
            ["birch"] = Vector3.new(1742.3203125, 138.25787353515625, -2502.23779296875),
            ["brine"] = Vector3.new(-1794.1134033203125, -142.86239624023438, -3302.81884765625),
            ["deep"] = Vector3.new(-1510.88672, -237.695053, -2852.90674),
            ["enchant"] = Vector3.new(1296.320068359375, -808.5519409179688, -298.93817138671875),
            ["executive"] = Vector3.new(-29.836761474609375, -250.48486328125, 199.11614990234375),
            ["keepers"] = Vector3.new(1296.320068359375, -808.5519409179688, -298.93817138671875),
            ["mod_house"] = Vector3.new(-30.205902099609375, -249.40594482421875, 204.0529022216797),
            ["moosewood"] = Vector3.new(383.10113525390625, 131.2406005859375, 243.93385314941406),
            ["mushgrove"] = Vector3.new(2501.486083984375, 131.00001525878906, -720.6993408203125),
            ["roslit"] = Vector3.new(-1476.5079345703125, 133.5, 671.6812744140625),
            ["snow"] = Vector3.new(2648.67578125, 139.06605529785156, 2521.29736328125),
            ["snowcap"] = Vector3.new(2649.06201171875, 142.28382873535156, 2521.45263671875),
            ["spike"] = Vector3.new(-1253.3489990234375, 137.20669555664062, 1554.5740966796875),
            ["statue"] = Vector3.new(73.47272491455078, 141.92999267578125, -1027.432373046875),
            ["sunstone"] = Vector3.new(-932.7903442382812, 131.8808135986328, -1119.1905517578125),
            ["swamp"] = Vector3.new(2501.592529296875, 131.00001525878906, -720.704345703125),
            ["terrapin"] = Vector3.new(-147.6435546875, 150.75936889648438, 1913.392822265625),
            ["trident"] = Vector3.new(-1479.48987, -228.710632, -2391.39307),
            ["vertigo"] = Vector3.new(-112.00830841064453, -515.2993774414062, 1040.327880859375),
            ["volcano"] = Vector3.new(-1888.5234375, 167.78244018554688, 329.23529052734375),
            ["wilson"] = Vector3.new(2938.80591, 277.474762, 2567.13379),
            ["wilsons_rod"] = Vector3.new(2879.2085, 135.07663, 2723.64233)
        }

        local targetPosition = teleportLocations[Value]
        if targetPosition then
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end
        else
            warn("Invalid location selected!")
        end
    end
})








local Dropdown = Tabs.Teleport:AddDropdown("Teleport To Totem", {
    Title = "Teleport To Totems",
    Description = "",
    Values = {
        "Aurora Totem", "Smokescreen Totem", "Windset Totem", "Tempest Totem", "Sundial Totem", "Eclipse Totem", "Meteor Totem", 
        "Blizzard Totem", "Avalanche Totem",
    },
    Multi = false,
    Default = "None",
    Callback = function(Value)
        local teleportLocations = {
            ["Aurora Totem"] = Vector3.new(-1811.0008544921875, -136.8893280029297, -3282.000244140625),
            ["Smokescreen Totem"] = Vector3.new(2789, 139.8254852294922, -625),
            ["Windset Totem"] = Vector3.new(2849, 178.33323669433594, 2702),
            ["Tempest Totem"] = Vector3.new(35, 132.50001525878906, 1943),
            ["Sundial Totem"] = Vector3.new(-1148, 134.49998474121094, -1075),
            ["Eclipse Totem"] = Vector3.new(5968.00048828125, 274.0086364746094, 838.1260375976562),
            ["Meteor Totem"] = Vector3.new(-1948, 275.3567199707031, 230),
            ["Blizzard Totem"] = Vector3.new(20145, 742.9527587890625, 5805),
            ["Avalanche Totem"] = Vector3.new(19710.787109375, 467.6305847167969, 6052.2626953125),
        }

        local targetPosition = teleportLocations[Value]
        if targetPosition then
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end
        else
            warn("Invalid item selected!")
        end
    end
})



local Section = Tabs.Teleport:AddSection("Teleport To Items")


Tabs.Teleport:AddParagraph({
    Title = "Important",
    Content = "If Nothing is displayed, please ensure to click the 'Refresh' button. And To Update Item List According To Location Click On Refresh Button"
})


-- Define the paths to your interactable models
local interactablesFolder = game.Workspace.world.interactables

-- Create a table to store model names dynamically
local modelNames = {}

-- Function to populate the table with unique model names from the interactables folder
local function refreshModelNames()
    -- Clear the current modelNames table
    modelNames = {}

    -- Populate the table with model names from the interactables folder, ensuring uniqueness
    local seenModels = {}  -- To keep track of model names we've already added

    for _, model in pairs(interactablesFolder:GetChildren()) do
        if model:IsA("Model") then
            local modelName = model.Name
            if not seenModels[modelName] then
                -- Only add the model name if we haven't already added it
                table.insert(modelNames, modelName)
                seenModels[modelName] = true
            end
        end
    end
end

-- Create the dropdown with dynamic values
local Dropdown = Tabs.Teleport:AddDropdown("Dropdown", { 
    Title = "Select Item",
    Description = "",
    Values = modelNames, -- Use the dynamic list of model names
    Multi = false,
    Default = "None",
})

-- Function to calculate the center of a model
local function calculateModelCenter(model)
    local totalPosition = Vector3.new(0, 0, 0)
    local partCount = 0

    -- Iterate through the model's parts
    for _, part in pairs(model:GetDescendants()) do
        if part:IsA("BasePart") then
            totalPosition += part.Position
            partCount += 1
        end
    end

    if partCount > 0 then
        return totalPosition / partCount -- Return the average position
    else
        return nil -- Return nil if no parts are found
    end
end

-- Function to teleport the player to a safe position near the model's center
local function teleportToModelCenter(model)
    local modelCenter = calculateModelCenter(model)
    if modelCenter then
        local safePosition = modelCenter + Vector3.new(0, 5, 0)  -- Adjust 5 units above the center

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(safePosition)
        else
            warn("Player character or HumanoidRootPart not found.")
        end
    else
        warn("Could not calculate the center of the model.")
    end
end

-- Teleport the player to the selected model's center when the dropdown is changed
Dropdown:OnChanged(function(selectedModelName)
    -- Find the selected model in the interactables folder
    local selectedModel = interactablesFolder:FindFirstChild(selectedModelName)
    if selectedModel and selectedModel:IsA("Model") then
        teleportToModelCenter(selectedModel)
    else
        warn("Selected model is invalid.")
    end
end)

-- Create the button to refresh the items
Tabs.Teleport:AddButton({ 
    Title = "Refresh",
    Description = "",
    Callback = function()
        -- Refresh the model names
        refreshModelNames()
        
        -- Update the dropdown with the new list of model names
        Dropdown:SetValues(modelNames)
    end
})







local Section = Tabs.Teleport:AddSection("Teleport To Zones")



local ZonesFolder = game.Workspace.zones.fishing -- Path to your zones folder

-- Function to get all unique zone names from the parts within the folder
local function getUniqueZoneNames()
    local zoneNames = {}
    local uniqueNames = {} -- Table to store unique zone names

    for _, zone in pairs(ZonesFolder:GetChildren()) do
        if zone:IsA("Part") then
            if not uniqueNames[zone.Name] then
                table.insert(zoneNames, zone.Name) -- Add the unique zone name to the list
                uniqueNames[zone.Name] = true -- Mark this zone name as added
            end
        end
    end
    return zoneNames
end

-- Function to check if a position is clear (no collisions)
local function isPositionClear(position)
    -- Check if there are any parts that would obstruct the player's movement
    local region = Region3.new(position - Vector3.new(2, 5, 2), position + Vector3.new(2, 5, 2)) -- 2x5x2 region around the position
    local parts = workspace:FindPartsInRegion3(region, nil, math.huge)
    for _, part in pairs(parts) do
        if part.CanCollide then
            return false -- There is an obstruction, so the position is not clear
        end
    end
    return true -- The position is clear
end

-- Function to teleport to a specific zone (above the part)
local function teleportToZone(zoneName)
    local zone = ZonesFolder:FindFirstChild(zoneName)
    if zone then
        -- Start with a position 10 studs above the zone part
        local aboveZone = zone.Position + Vector3.new(0, 10, 0)
        
        -- Check if the position is clear, if not, keep moving up in smaller increments until clear
        while not isPositionClear(aboveZone) do
            aboveZone = aboveZone + Vector3.new(0, 1, 0) -- Move 1 stud higher and check again
        end
        
        -- Teleport the player to the clear position above the zone part
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(aboveZone))
        
        -- Set CanCollide to true for all parts in the fishing zones
        for _, part in pairs(ZonesFolder:GetChildren()) do
            if part:IsA("Part") then
                part.CanCollide = true -- Ensure CanCollide is ON for all parts
            end
        end
    end
end

-- Function to refresh (reload) the zones
local function refreshZones()
    -- Reparent the fishing model to reload it (or reset as needed)
    local fishingModel = game.Workspace.zones:FindFirstChild("fishing")
    if fishingModel then
        fishingModel.Parent = nil
        wait(1) -- Wait for a brief moment before reparenting
        fishingModel.Parent = game.Workspace.zones
    end
end

-- Dropdown values are the unique zone names
local Dropdown = Tabs.Teleport:AddDropdown("Dropdown", { 
    Title = "Select Zone",
    Description = "",
    Values = getUniqueZoneNames(),  -- Dynamically populate the dropdown with unique zone names
    Multi = false,
    Default = "None",
    Callback = function(selectedZone)
        teleportToZone(selectedZone)  -- Teleport to the selected zone when clicked
    end,
})

-- Add the "Refresh" button to reload the zones
Tabs.Teleport:AddButton({ 
    Title = "Refresh", 
    Description = "",
    Callback = function()
        refreshZones()  -- Refresh the zones when the button is clicked
    end
})





local Section = Tabs.Teleport:AddSection("Teleport To Zone Events")

Tabs.Teleport:AddParagraph({
    Title = "Important",
    Content = "Teleport to the event location only when the event occurs in the game, as teleporting to the area without an active event will result in an empty location"
})


local WorldEventsFolder = game.ReplicatedStorage.resources.replicated.worldevents -- Path to your world events folder (sharks)

-- Function to get the Shark event names
local function getSharkEventNames()
    local eventNames = {}

    -- Look for "Sharks" folder in worldevents
    local sharksFolder = WorldEventsFolder:FindFirstChild("Sharks")
    if sharksFolder then
        -- Check for models inside Sharks folder
        for _, model in pairs(sharksFolder:GetChildren()) do
            if model:IsA("Model") then
                -- Add model names to eventNames
                table.insert(eventNames, model.Name)
            end
        end
    end
    return eventNames
end

-- Function to check if a position is clear (no collisions)
local function isPositionClear(position)
    local region = Region3.new(position - Vector3.new(2, 5, 2), position + Vector3.new(2, 5, 2)) -- 2x5x2 region around the position
    local parts = workspace:FindPartsInRegion3(region, nil, math.huge)
    for _, part in pairs(parts) do
        if part.CanCollide then
            return false -- There is an obstruction, so the position is not clear
        end
    end
    return true -- The position is clear
end

-- Function to teleport to a specific world event (above the part)
local function teleportToSharkEvent(eventName)
    local sharksFolder = WorldEventsFolder:FindFirstChild("Sharks")
    if sharksFolder then
        local eventModel = sharksFolder:FindFirstChild(eventName)
        if eventModel and eventModel:IsA("Model") then
            -- Find the first part in the model (or you can adjust this logic)
            local part = eventModel:FindFirstChildOfClass("Part")
            
            if part then
                -- Start with a position 10 studs above the part
                local abovePart = part.Position + Vector3.new(0, 10, 0)
                
                -- Check if the position is clear, if not, keep moving up in smaller increments until clear
                while not isPositionClear(abovePart) do
                    abovePart = abovePart + Vector3.new(0, 1, 0) -- Move 1 stud higher and check again
                end
                
                -- Teleport the player to the clear position above the part
                game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(abovePart))
                
                -- Set CanCollide to true for all parts in the model
                for _, eventPart in pairs(eventModel:GetChildren()) do
                    if eventPart:IsA("Part") then
                        eventPart.CanCollide = true -- Ensure CanCollide is ON for all parts
                    end
                end
            end
        end
    end
end

-- Dropdown values are the world event names under the Sharks folder
local EventDropdown = Tabs.Teleport:AddDropdown("SharkEventDropdown", { 
    Title = "Select Event",
    Description = "",
    Values = getSharkEventNames(),  -- Dynamically populate the dropdown with Shark event names
    Multi = false,
    Default = "None",  -- Set the default value to "None"
    Callback = function(selectedEvent)
        if selectedEvent ~= "None" then
            teleportToSharkEvent(selectedEvent)  -- Teleport to the selected Shark event
        end
    end,
})

-- Add the "Refresh" button to reload the Shark events
Tabs.Teleport:AddButton({ 
    Title = "Refresh", 
    Description = "",
    Callback = function()
        -- This refreshes the Sharks folder by reparenting the worldevents model.
        local sharksFolder = game.ReplicatedStorage.resources.replicated.worldevents:FindFirstChild("Sharks")
        if sharksFolder then
            sharksFolder.Parent = nil
            wait(1) -- Wait for a brief moment before reparenting
            sharksFolder.Parent = game.ReplicatedStorage.resources.replicated.worldevents
        end
    end
})








local Section = Tabs.Teleport:AddSection("Teleport To Npcs")


Tabs.Teleport:AddParagraph({
    Title = "Important",
    Content = "If 'No NPCs Found' is displayed, please ensure to click the 'Refresh' button. And To Update NPCS List According To Location Click On Refresh Button"
})


-- Reference the necessary services
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

-- Get the NPC folder
local NPCFolder = Workspace:WaitForChild("world"):WaitForChild("npcs")
local LocalPlayer = Players.LocalPlayer

-- Function to ensure the player's character is ready
local function getCharacter()
    return LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
end

-- Dictionary to store NPC names and their positions
local teleportLocations = {}

-- Function to populate teleportLocations with NPC positions
local function populateTeleportLocations()
    teleportLocations = {} -- Clear existing data
    for _, npc in pairs(NPCFolder:GetChildren()) do
        if npc:IsA("Model") and npc:FindFirstChild("HumanoidRootPart") then
            teleportLocations[npc.Name] = npc.HumanoidRootPart.Position -- Store NPC's position
        end
    end
end

-- Convert teleportLocations keys to a list for the dropdown
local function getNpcNames()
    local npcNames = {}
    for npcName in pairs(teleportLocations) do
        table.insert(npcNames, npcName)
    end
    -- Add a placeholder if no NPCs are found
    if #npcNames == 0 then
        table.insert(npcNames, "No NPCs Found")
    end
    return npcNames
end

-- Create the dropdown
local selectedNPC = nil
local Dropdown = Tabs.Teleport:AddDropdown("Dropdown", { 
    Title = "Select NPC",
    Description = "",
    Values = getNpcNames(), -- Use the NPC names as dropdown options
    Multi = false,
    Default = "None",
    Callback = function(value)
        selectedNPC = value -- Store the selected NPC
        print("Selected NPC:", selectedNPC) -- Debugging output
    end
})

-- Function to teleport the player to the selected NPC
local function teleportToNPC()
    if selectedNPC then
        local targetPosition = teleportLocations[selectedNPC] -- Get the NPC's position
        if targetPosition then
            local character = getCharacter()
            if character and character:FindFirstChild("HumanoidRootPart") then
                -- Teleport the player's HumanoidRootPart to the NPC's position
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(0, 5, 0)) -- Offset to avoid collision
            else
                warn("Player's character or HumanoidRootPart not found!")
            end
        else
            warn("Invalid NPC selected or position missing!")
        end
    else
        warn("No NPC selected!")
    end
end

-- Create the button to teleport to the selected NPC
Tabs.Teleport:AddButton({ 
    Title = "Teleport", 
    Description = "",
    Callback = function()
        teleportToNPC() -- Teleport when the button is clicked
    end
})

-- Create the refresh button to refresh the NPC dropdown
Tabs.Teleport:AddButton({ 
    Title = "Refresh", 
    Description = "",
    Callback = function()
        -- Repopulate teleport locations by scanning the NPC folder again
        populateTeleportLocations()
        
        -- Update the dropdown values
        local updatedNpcNames = getNpcNames()
        Dropdown:SetValues(updatedNpcNames) -- Update the dropdown with the new NPC names

        print("NPCs refreshed!") -- Debugging output
    end
})







local Section = Tabs.Teleport:AddSection("Teleport To Players")




-- Get the list of players in the game
local Players = game:GetService("Players")

-- Function to get all players' names
local function getPlayerNames()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    return playerNames
end

-- Create the Dropdown (initially empty)
local Dropdown = Tabs.Teleport:AddDropdown("Dropdown", { 
    Title = "Select Player",
    Description = "",
    Values = getPlayerNames(),  -- Populate with all player names
    Multi = false,
    Default = "None",  -- Optional: You can set this to 1 or leave it to show the first item
})

-- Add a Button to teleport to the selected player
Tabs.Teleport:AddButton({ 
    Title = "Teleport",
    Description = "",
    Callback = function()
        -- Get the selected player name
        local selectedPlayerName = Dropdown.Value
        
        if selectedPlayerName then
            local selectedPlayer = Players:FindFirstChild(selectedPlayerName)
            
            if selectedPlayer then
                -- Ensure the selected player has a character and HumanoidRootPart
                local character = selectedPlayer.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    -- Get the local player and teleport
                    local localPlayer = Players.LocalPlayer
                    local localCharacter = localPlayer.Character
                    
                    if localCharacter and localCharacter:FindFirstChild("HumanoidRootPart") then
                        -- Teleport the local player to the selected player's HumanoidRootPart, no distance limit
                        localPlayer.Character:SetPrimaryPartCFrame(character.HumanoidRootPart.CFrame)
                    else
                        warn("Local player's character or HumanoidRootPart not found.")
                    end
                else
                    warn("Selected player doesn't have a valid character or HumanoidRootPart.")
                end
            else
                warn("Selected player not found in the game.")
            end
        else
            warn("No player selected from the dropdown.")
        end
    end
})

-- Add a Button to refresh the player list
Tabs.Teleport:AddButton({ 
    Title = "Refresh", 
    Description = "",
    Callback = function()
        -- Refresh the dropdown values with the updated list of players
        local currentPlayerNames = getPlayerNames()  -- Get the updated list of players
        Dropdown:SetValues(currentPlayerNames)  -- Update the dropdown with fresh list of players
    end
})






local Section = Tabs.Performance:AddSection("Recommended only for low-end devices")



local Slider = Tabs.Performance:AddSlider("FPSCAP", 
{
    Title = "FPS",
    Description = "",
    Default = 60,
    Min = 1,
    Max = 4000,
    Rounding = 1,
    Callback = function(fpsCap1)
		setfpscap(fpsCap1)
    end
})


Tabs.Performance:AddButton({
    Title = "Anti Lag (1)",
    Description = "",
    Callback = function()
        local decalsyeeted = true
        local g = game
        local w = g.Workspace
        local l = g.Lighting
        local t = w.Terrain

        t.WaterWaveSize = 0
        t.WaterWaveSpeed = 0
        t.WaterReflectance = 0
        t.WaterTransparency = 0
        l.GlobalShadows = false
        l.FogEnd = 9e9
        l.Brightness = 0
        settings().Rendering.QualityLevel = "Level01"

        for i, v in pairs(g:GetDescendants()) do
            if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                v.Material = "Plastic"
                v.Reflectance = 0
            elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
                v.Transparency = 1
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Lifetime = NumberRange.new(0)
            elseif v:IsA("Explosion") then
                v.BlastPressure = 1
                v.BlastRadius = 1
            elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then
                v.Enabled = false
            elseif v:IsA("MeshPart") then
                v.Material = "Plastic"
                v.Reflectance = 0
                v.TextureID = 10385902758728957
            end
        end


        for i, e in pairs(l:GetChildren()) do
            if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
                e.Enabled = false
            end
        end
        
        print("Anti Lag settings applied lil nigga")
    end
})


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer


local function SetCharacterTransparency(character)
    if character then
        for _, descendant in ipairs(character:GetDescendants()) do
            if descendant:IsA("BasePart") and descendant.Name ~= "HumanoidRootPart" then
                descendant.Transparency = 1
                descendant.CanCollide = false
            elseif descendant:IsA("Decal") then
                descendant.Transparency = 1
            elseif descendant:IsA("Accessory") and descendant:FindFirstChild("Handle") then
                descendant.Handle.Transparency = 1
                descendant.Handle.CanCollide = false
            end
        end
    end
end

local function RestoreCharacterTransparency(character)
    if character then
        for _, descendant in ipairs(character:GetDescendants()) do
            if descendant:IsA("BasePart") and descendant.Name ~= "HumanoidRootPart" then
                descendant.Transparency = 0
                descendant.CanCollide = true
            elseif descendant:IsA("Decal") then
                descendant.Transparency = 0
            elseif descendant:IsA("Accessory") and descendant:FindFirstChild("Handle") then
                descendant.Handle.Transparency = 0
                descendant.Handle.CanCollide = true
            end
        end
    end
end



Tabs.Performance:AddButton({
    Title = "Anti Lag (2)",
    Description = "",
    Callback = function()
        for _, v in pairs(game:GetDescendants()) do
            if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") then
                if v.Transparency ~= 1 then
                    v.Material = Enum.Material.SmoothPlastic
                end
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v:Destroy()
            end
        end
        print("Anti Lag Success")
    end
})
Tabs.Performance:AddButton({
    Title = "Destroy All Particle",
    Description = "",
    Callback = function()
        for _, v in pairs(game:GetDescendants()) do
            if v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v:Destroy()
            end
        end
        print("Success Destroy Particle")
    end
})






local HidePlayersToggle = Tabs.Performance:AddToggle("HidePlayersToggle", {
    Title = "Hide Other Players",
    Description = "",
    Default = false,
    Callback = function(state)
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                player.CharacterAdded:Connect(function(character)
                    if state then
                        SetCharacterTransparency(character)
                    else
                        RestoreCharacterTransparency(character)
                    end
                end)


                if player.Character then
                    if state then
                        SetCharacterTransparency(player.Character)
                    else
                        RestoreCharacterTransparency(player.Character)
                    end
                end
            end
        end
    end
})



local function applyOptimizations()
    local workspace = game.Workspace
    local lighting = game.Lighting
    local terrain = workspace.Terrain
    

    terrain.WaterWaveSize = 0
    terrain.WaterWaveSpeed = 0
    terrain.WaterReflectance = 0
    terrain.WaterTransparency = 0
    

    lighting.GlobalShadows = false
    lighting.FogEnd = 9e9
    lighting.Brightness = 0
    

    settings().Rendering.QualityLevel = "Level01"
    

    for _, descendant in pairs(game:GetDescendants()) do
        if descendant:IsA("BasePart") or descendant:IsA("MeshPart") then
            descendant.Material = "SmoothPlastic"
            descendant.Reflectance = 0
            descendant.CastShadow = false
        elseif descendant:IsA("Decal") then
            descendant.Transparency = 1
        elseif descendant:IsA("ParticleEmitter") or descendant:IsA("Trail") then
            descendant.Lifetime = NumberRange.new(0)
        elseif descendant:IsA("Explosion") then
            descendant.BlastPressure = 1
            descendant.BlastRadius = 1
        elseif descendant:IsA("Fire") or descendant:IsA("SpotLight") or descendant:IsA("Smoke") then
            descendant.Enabled = false
        end
    end
    

    for _, effect in pairs(lighting:GetChildren()) do
        if effect:IsA("PostEffect") or effect:IsA("DepthOfFieldEffect") then
            effect.Enabled = false
        end
    end
end

Tabs.Performance:AddButton({
    Title = "1-Click FPS Boost",
    Description = "",
    Callback = function()
        applyOptimizations()
    end,
})







local Toggle = Tabs.ESP:AddToggle("ItemESP", {
    Title = "Item ESP",
    Description = "",
    Default = false,
    Callback = function(state)
        -- Check if "world" exists in Workspace
        local worldFolder = game.Workspace:FindFirstChild("world")
        if not worldFolder then
            warn("world folder not found in Workspace")
            return
        end

        -- Check if "interactables" exists in "world"
        local interactablesFolder = worldFolder:FindFirstChild("interactables")
        if not interactablesFolder then
            warn("interactables folder not found in world")
            return
        end

        -- Toggle logic for ESP
        if state then
            -- Toggle On: Add ESP and name tags to models
            for _, model in pairs(interactablesFolder:GetChildren()) do
                if model:IsA("Model") then
                    -- Create ESP highlight effect
                    local highlight = Instance.new("Highlight")
                    highlight.Parent = model
                    highlight.Adornee = model
                    highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red fill
                    highlight.OutlineColor = Color3.fromRGB(255, 255, 255) -- White outline
                    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop -- Ensure it stays visible

                    -- Create BillboardGui for item name tag
                    local primaryPart = model.PrimaryPart or model:FindFirstChild("PrimaryPart")
                    if primaryPart then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Parent = primaryPart
                        billboardGui.Adornee = primaryPart
                        billboardGui.Size = UDim2.new(4, 0, 1, 0) -- Adjust size for visibility
                        billboardGui.StudsOffset = Vector3.new(0, 2.5, 0) -- Offset above the item
                        billboardGui.AlwaysOnTop = true

                        -- Create TextLabel for item name
                        local textLabel = Instance.new("TextLabel")
                        textLabel.Parent = billboardGui
                        textLabel.Size = UDim2.new(1, 0, 2, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = model.Name -- Display item's name
                        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
                        textLabel.TextStrokeTransparency = 0 -- Add stroke for better visibility
                        textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Black stroke
                        textLabel.Font = Enum.Font.GothamBold
                        textLabel.TextScaled = true
                    end
                end
            end
            print("Toggle On - Item ESP Enabled")
        else
            -- Toggle Off: Remove ESP and name tags from models
            for _, model in pairs(interactablesFolder:GetChildren()) do
                if model:IsA("Model") then
                    -- Remove Highlight
                    local highlight = model:FindFirstChildOfClass("Highlight")
                    if highlight then
                        highlight:Destroy()
                    end

                    -- Remove BillboardGui
                    local primaryPart = model.PrimaryPart or model:FindFirstChild("PrimaryPart")
                    if primaryPart then
                        local billboardGui = primaryPart:FindFirstChildOfClass("BillboardGui")
                        if billboardGui then
                            billboardGui:Destroy()
                        end
                    end
                end
            end
            print("Toggle Off - Item ESP Disabled")
        end
    end
})








local Toggle = Tabs.ESP:AddToggle("NPCESP", {
    Title = "NPC ESP",
    Description = "",
    Default = false,
    Callback = function(state)
        -- Check if "world" exists in Workspace
        local worldFolder = game.Workspace:FindFirstChild("world")
        if not worldFolder then
            warn("world folder not found in Workspace")
            return
        end

        -- Check if "npcs" exists in "world"
        local npcsFolder = worldFolder:FindFirstChild("npcs")
        if not npcsFolder then
            warn("npcs folder not found in world")
            return
        end

        -- Toggle logic for ESP
        if state then
            -- Toggle On: Add ESP and name tags to NPC models
            for _, npc in pairs(npcsFolder:GetChildren()) do
                if npc:IsA("Model") and npc:FindFirstChild("HumanoidRootPart") then
                    -- Create ESP highlight effect
                    local highlight = Instance.new("Highlight")
                    highlight.Parent = npc
                    highlight.Adornee = npc
                    highlight.FillColor = Color3.fromRGB(0, 255, 0) -- Green fill
                    highlight.OutlineColor = Color3.fromRGB(255, 255, 255) -- White outline

                    -- Create BillboardGui for name tag
                    local billboardGui = Instance.new("BillboardGui")
                    billboardGui.Parent = npc.HumanoidRootPart
                    billboardGui.Adornee = npc.HumanoidRootPart
                    billboardGui.Size = UDim2.new(4, 0, 1, 0) -- Adjust size for visibility
                    billboardGui.StudsOffset = Vector3.new(0, 2.5, 0) -- Offset above NPC's head
                    billboardGui.AlwaysOnTop = true

                    -- Create TextLabel for name
                    local textLabel = Instance.new("TextLabel")
                    textLabel.Parent = billboardGui
                    textLabel.Size = UDim2.new(1, 0, 2, 0)
                    textLabel.BackgroundTransparency = 1
                    textLabel.Text = npc.Name -- Display NPC's name
                    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
                    textLabel.TextStrokeTransparency = 0 -- Add stroke for better visibility
                    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Black stroke
                    textLabel.Font = Enum.Font.GothamBold
                    textLabel.TextScaled = true
                end
            end
            print("Toggle On - NPC ESP Enabled")
        else
            -- Toggle Off: Remove ESP and name tags from NPC models
            for _, npc in pairs(npcsFolder:GetChildren()) do
                if npc:IsA("Model") and npc:FindFirstChild("HumanoidRootPart") then
                    -- Remove Highlight
                    local highlight = npc:FindFirstChildOfClass("Highlight")
                    if highlight then
                        highlight:Destroy()
                    end

                    -- Remove BillboardGui
                    local billboardGui = npc.HumanoidRootPart:FindFirstChildOfClass("BillboardGui")
                    if billboardGui then
                        billboardGui:Destroy()
                    end
                end
            end
            print("Toggle Off - NPC ESP Disabled")
        end
    end
})



local Toggle = Tabs.ESP:AddToggle("PlayerESP", {
    Title = "Player ESP",
    Description = "",
    Default = false,
    Callback = function(state)
        -- Toggle logic for ESP
        if state then
            -- Toggle On: Add ESP and name tags to players
            for _, player in pairs(game.Players:GetPlayers()) do
                -- Ensure the player character exists and is loaded
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local character = player.Character
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

                    -- Create ESP highlight effect
                    local highlight = Instance.new("Highlight")
                    highlight.Parent = character
                    highlight.Adornee = character
                    highlight.FillColor = Color3.fromRGB(0, 255, 0) -- Green fill for players
                    highlight.OutlineColor = Color3.fromRGB(255, 255, 255) -- White outline
                    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop -- Ensure it stays visible
                    highlight.Enabled = true

                    -- Create BillboardGui for player name tag
                    local billboardGui = Instance.new("BillboardGui")
                    billboardGui.Parent = humanoidRootPart
                    billboardGui.Adornee = humanoidRootPart
                    billboardGui.Size = UDim2.new(6, 0, 1.5, 0) -- Default size for visibility
                    billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Offset above the player
                    billboardGui.AlwaysOnTop = true

                    -- Create TextLabel for player name
                    local textLabel = Instance.new("TextLabel")
                    textLabel.Parent = billboardGui
                    textLabel.Size = UDim2.new(1, 0, 1, 0)
                    textLabel.BackgroundTransparency = 1
                    textLabel.Text = player.Name -- Display player's name
                    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
                    textLabel.TextStrokeTransparency = 0 -- Add stroke for better visibility
                    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Black stroke
                    textLabel.Font = Enum.Font.GothamBold
                    textLabel.TextScaled = true

                    -- Adjust the BillboardGui size based on distance from camera
                    local camera = game.Workspace.CurrentCamera
                    local dist = (camera.CFrame.Position - humanoidRootPart.Position).Magnitude
                    local scaleFactor = math.min(15, math.max(5, dist / 50)) -- Scale the size with distance, adjust as needed
                    billboardGui.Size = UDim2.new(scaleFactor, 0, 3, 0) -- Keep it visible even from far distances

                    -- Force visibility for far distance players
                    highlight.OutlineTransparency = 0.5 -- Increase outline transparency for far distance
                    highlight.FillTransparency = 0.5 -- Increase fill transparency for far distance
                end
            end
            print("Toggle On - Player ESP Enabled")
        else
            -- Toggle Off: Remove ESP and name tags from players
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local character = player.Character
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

                    -- Remove Highlight
                    local highlight = character:FindFirstChildOfClass("Highlight")
                    if highlight then
                        highlight:Destroy()
                    end

                    -- Remove BillboardGui
                    local billboardGui = humanoidRootPart:FindFirstChildOfClass("BillboardGui")
                    if billboardGui then
                        billboardGui:Destroy()
                    end
                end
            end
            print("Toggle Off - Player ESP Disabled")
        end
    end
})











local Section = Tabs.STATS:AddSection("                                Player Stats :")



local player = game.Players.LocalPlayer  -- Reference the local player
local replicatedStorage = game:GetService("ReplicatedStorage")  -- Access ReplicatedStorage
local playerStats = replicatedStorage:WaitForChild("playerstats")  -- Access the 'playerstats' folder
local playerFolder = playerStats:WaitForChild(player.Name)  -- Access the player's folder
local statsFolder = playerFolder:WaitForChild("Stats")  -- Access the Stats folder
local spawnLocationValue = statsFolder:WaitForChild("spawnlocation")  -- Access the spawnlocation StringValue

-- Add a paragraph with the spawn location once
Tabs.STATS:AddParagraph({
    Title = "Spawn Location",
    Content = "Spawn Location: " .. spawnLocationValue.Value
})


local player = game.Players.LocalPlayer  -- Reference the local player
local replicatedStorage = game:GetService("ReplicatedStorage")  -- Access ReplicatedStorage
local playerStats = replicatedStorage:WaitForChild("playerstats")  -- Access the 'playerstats' folder
local playerFolder = playerStats:WaitForChild(player.Name)  -- Access the player's folder
local statsFolder = playerFolder:WaitForChild("Stats")  -- Access the Stats folder
local titleValue = statsFolder:WaitForChild("title")  -- Access the title StringValue

-- Add a paragraph with the title once
Tabs.STATS:AddParagraph({
    Title = "Title",
    Content = "Title: " .. titleValue.Value
})





local player = game.Players.LocalPlayer  -- Reference the local player
local level = player.leaderstats.Level.Value  -- Get the player's level

Tabs.STATS:AddParagraph({ 
    Title = "Your Current Level", 
    Content = "Level : " .. tostring(level)  -- Dynamically display the level
})

local player = game.Players.LocalPlayer  -- Reference the local player
local cash = player.leaderstats["C$"].Value  -- Get the player's cash value (using brackets for special characters)

Tabs.STATS:AddParagraph({ 
    Title = "Your Current Cash", 
    Content = "Cash : " .. tostring(cash)  -- Dynamically display the cash value
})



local player = game.Players.LocalPlayer  -- Reference the local player
local replicatedStorage = game:GetService("ReplicatedStorage")  -- Access ReplicatedStorage
local playerStats = replicatedStorage:WaitForChild("playerstats")  -- Access the 'playerstats' folder
local playerFolder = playerStats:WaitForChild(player.Name)  -- Access the player's folder
local statsFolder = playerFolder:WaitForChild("Stats")  -- Access the Stats folder
local timePlayedValue = statsFolder:WaitForChild("tracker_timeplayed")  -- Access the tracker_timeplayed NumberValue

-- Retrieve the time played value
local timePlayed = timePlayedValue.Value

-- Format the time into hours, minutes, and seconds (optional)
local hours = math.floor(timePlayed / 3600)
local minutes = math.floor((timePlayed % 3600) / 60)
local seconds = timePlayed % 60
local formattedTime = string.format("%02d:%02d:%02d", hours, minutes, seconds)  -- HH:MM:SS format

-- Add the paragraph to the Fluent tab
Tabs.STATS:AddParagraph({
    Title = "Time Played",
    Content = "Total Time Played: " .. formattedTime  -- Display formatted time
})

local player = game.Players.LocalPlayer  -- Reference the local player
local replicatedStorage = game:GetService("ReplicatedStorage")  -- Access ReplicatedStorage
local playerStats = replicatedStorage:WaitForChild("playerstats")  -- Access the 'playerstats' folder
local playerFolder = playerStats:WaitForChild(player.Name)  -- Access the player's folder
local statsFolder = playerFolder:WaitForChild("Stats")  -- Access the Stats folder
local timesJoinedValue = statsFolder:WaitForChild("tracker_timesjoined")  -- Access the tracker_timesjoined NumberValue

-- Retrieve the times joined value
local timesJoined = timesJoinedValue.Value

-- Add the paragraph to the Fluent tab
Tabs.STATS:AddParagraph({
    Title = "Times Joined",
    Content = "Total Times Joined: " .. tostring(timesJoined)  -- Display the number of times joined
})

local player = game.Players.LocalPlayer  -- Reference the local player
local replicatedStorage = game:GetService("ReplicatedStorage")  -- Access ReplicatedStorage
local playerStats = replicatedStorage:WaitForChild("playerstats")  -- Access the 'playerstats' folder
local playerFolder = playerStats:WaitForChild(player.Name)  -- Access the player's folder
local statsFolder = playerFolder:WaitForChild("Stats")  -- Access the Stats folder
local dailyStreakValue = statsFolder:WaitForChild("dailystreak")  -- Access the dailystreak NumberValue

-- Retrieve the daily streak value
local dailyStreak = dailyStreakValue.Value

-- Add the paragraph to the Fluent tab
Tabs.STATS:AddParagraph({
    Title = "Daily Streak",
    Content = "Current Daily Streak: " .. tostring(dailyStreak)  -- Display the daily streak value
})

local player = game.Players.LocalPlayer  -- Reference the local player
local replicatedStorage = game:GetService("ReplicatedStorage")  -- Access ReplicatedStorage
local playerStats = replicatedStorage:WaitForChild("playerstats")  -- Access the 'playerstats' folder
local playerFolder = playerStats:WaitForChild(player.Name)  -- Access the player's folder
local statsFolder = playerFolder:WaitForChild("Stats")  -- Access the Stats folder
local fishCaughtValue = statsFolder:WaitForChild("tracker_fishcaught")  -- Access the tracker_fishcaught NumberValue

-- Retrieve the total fish caught value
local totalFishesCaught = fishCaughtValue.Value

-- Add the paragraph to the Fluent tab
Tabs.STATS:AddParagraph({
    Title = "Total Fishes Caught",
    Content = "Total Fishes Caught: " .. tostring(totalFishesCaught)  -- Display the number of fishes caught
})

local player = game.Players.LocalPlayer  -- Reference the local player
local replicatedStorage = game:GetService("ReplicatedStorage")  -- Access ReplicatedStorage
local playerStats = replicatedStorage:WaitForChild("playerstats")  -- Access the 'playerstats' folder
local playerFolder = playerStats:WaitForChild(player.Name)  -- Access the player's folder
local statsFolder = playerFolder:WaitForChild("Stats")  -- Access the Stats folder
local totaldeathvalue = statsFolder:WaitForChild("tracker_deaths")  -- Access the tracker_fishcaught NumberValue

-- Retrieve the total fish caught value
local totaldeath = totaldeathvalue.Value

-- Add the paragraph to the Fluent tab
Tabs.STATS:AddParagraph({
    Title = "Total Deaths",
    Content = "Total Deaths: " .. tostring(totaldeath)  -- Display the number of fishes caught
})





local Section = Tabs.STATS:AddSection("                                Server Info :")

-- Get the server ID dynamically
local serverID = game.JobId

-- Get the server region from ReplicatedStorage
local regionValue = game:GetService("ReplicatedStorage"):WaitForChild("world"):WaitForChild("region_country")
local serverRegion = regionValue.Value

-- Get the region city from ReplicatedStorage
local cityValue = game:GetService("ReplicatedStorage"):WaitForChild("world"):WaitForChild("region_city")
local serverCity = cityValue.Value

-- Get the region region from ReplicatedStorage
local regionRegionValue = game:GetService("ReplicatedStorage"):WaitForChild("world"):WaitForChild("region_region")
local serverRegionRegion = regionRegionValue.Value

-- Get the current game version for the local player
local player = game.Players.LocalPlayer
local lastVersionValue = game:GetService("ReplicatedStorage"):WaitForChild("playerstats"):WaitForChild(player.Name):WaitForChild("Stats"):WaitForChild("lastversion")
local gameVersion = lastVersionValue.Value

-- Get the game name using MarketplaceService
local MarketplaceService = game:GetService("MarketplaceService")
local success, productInfo = pcall(function()
    return MarketplaceService:GetProductInfo(game.PlaceId)
end)

local gameName = "Unknown"
if success and productInfo then
    gameName = productInfo.Name
end

-- Get the place ID
local placeId = game.PlaceId

-- Get the platform
local userInputService = game:GetService("UserInputService")
local platform = userInputService:GetPlatform().Name

-- Display the information
Section:AddParagraph({
    Title = "Server ID: " .. serverID
})

Section:AddParagraph({
    Title = "Server Region: " .. serverRegion
})

Section:AddParagraph({
    Title = "Server City: " .. serverCity
})

Section:AddParagraph({
    Title = "Server Region Region: " .. serverRegionRegion
})

Section:AddParagraph({
    Title = "Current Game Version: " .. gameVersion
})

Section:AddParagraph({
    Title = "Game Name: " .. gameName
})

Section:AddParagraph({
    Title = "Place ID: " .. placeId
})

Section:AddParagraph({
    Title = "Platform: " .. platform
})




local Section = Tabs.info:AddSection("Info + Fixes")



Tabs.info:AddParagraph({
    Title = "How To Fix Blur Problem ?",
    Content = "To Fix Blur Problem Set Your Graphics Quality\nTo 7 or Below 7"
})




Tabs.info:AddParagraph({
    Title = "New Updates!",
    Content = "We will keep updating this with many amazing features in the future. Have any suggestions? Join our Discord and let us know!"
})


